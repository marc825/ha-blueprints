blueprint:
  name: Own Blueprint GH - ZHA - Controller Lidl FB20 002
  description: 'Controller automation for executing any kind of action triggered by
    an Lidl FB20 002. Allows to optionally loop an action on a
    button long press.

    Supports ZHA.

    '
  domain: automation
  input:
    controller_device:
      name: Controller Device
      description: The controller device to use for the automation. Choose a value
        only if the remote is integrated with ZHA.
      default: ''
      selector:
        device: {}
    action_button_off_short:
      name: (Optional) Off button - short press
      description: Action to run on short left button press.
      default: []
      selector:
        action: {}
    action_button_on_short:
      name: (Optional) On button - short press
      description: Action to run on short right button press.
      default: []
      selector:
        action: {}
    action_button_up_short:
      name: (Optional) Up button - short press
      description: Action to run on short up button press.
      default: []
      selector:
        action: {}
    action_button_up_long:
      name: (Optional) Up button - long press
      description: Action to run on long up button press.
      default: []
      selector:
        action: {}
    action_button_down_short:
      name: (Optional) Down button - short press
      description: Action to run on short down button press.
      default: []
      selector:
        action: {}
    action_button_down_long:
      name: (Optional) Down button - long press
      description: Action to run on long down button press.
      default: []
      selector:
        action: {}
variables:
  integration: zha
  integration_id: '{{ integration | lower }}'
  actions_mapping:
    zha:
      button_off_short:
      - 'off'
      button_on_short:
      - 'on'

      button_up_short:
      - step_StepMode.Up_51_10
      button_up_long:
      - move_MoveMode.Up_51
      button_up_release:
      - stop
  
      button_down_short:
      - step_StepMode.Down_51_10
      button_down_long:
      - move_MoveMode.Down_51
      button_down_release:
      - stop

  button_off_short: '{{ actions_mapping[integration_id]["button_off_short"] }}'

  button_on_short: '{{ actions_mapping[integration_id]["button_on_short"] }}'

  button_up_short: '{{ actions_mapping[integration_id]["button_up_short"] }}'
  button_up_long: '{{ actions_mapping[integration_id]["button_up_long"] }}'
  button_up_release: '{{ actions_mapping[integration_id]["button_up_release"] }}'

  button_down_short: '{{ actions_mapping[integration_id]["button_down_short"] }}'
  button_down_long: '{{ actions_mapping[integration_id]["button_down_long"] }}'
  button_down_release: '{{ actions_mapping[integration_id]["button_down_release"] }}'

  controller_device: !input 'controller_device'
  controller_id: '{{controller_device}}'
mode: restart
max_exceeded: silent
trigger:
- platform: event
  event_type:
  - zha_event
  - deconz_event
  event_data:
    device_id: !input 'controller_device'
condition:
  - condition: and
    conditions:
      - condition: template
        value_template: >-
          {{ (trigger.event.data.command ~
              ( '_' if trigger.event.data.args|length > 0 else '') ~
              (trigger.event.data.args|join('_'))) != '' }}
      - condition: template
        value_template: >-
          {{ integration_id != "zigbee2mqtt" or
            trigger.event.data.new_state.state != trigger.event.data.old_state.state }}
action:
- variables:
    trigger_action: '{{ trigger.event.data.command }}{{ "_" if trigger.event.data.args|length > 0 }}{{ trigger.event.data.args|join("_") }}'
- choose:
  - conditions: '{{ (trigger_action | string) in button_on_short }}'
    sequence: !input 'action_button_on_short'

  - conditions: '{{ (trigger_action | string) in button_off_short }}'
    sequence: !input 'action_button_off_short'
 
  - conditions: '{{ (trigger_action | string) in button_up_short }}'
    sequence: !input 'action_button_up_short'

  - conditions: '{{ (trigger_action | string) in button_up_long }}'
    sequence:
    - repeat:
        sequence: !input 'action_button_up_long'
        until: '{{ button_up_release }}'
      
  - conditions: '{{ (trigger_action | string) in button_down_short }}'
    sequence: !input 'action_button_down_short'
        
  - conditions: '{{ (trigger_action | string) in button_down_long }}'
    sequence:
    - repeat:
        sequence: !input 'action_button_down_long'
        until: '{{ button_down_release }}'
 
